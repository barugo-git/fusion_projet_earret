{% extends 'base.html.twig' %}

{% block body %}
    <div class="row">
        <div class="col-lg-8 offset-lg-2">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title mb-0"> <br>
                        {% include 'partials/_intitule_dossier.html.twig' %}
                     </h4>
                </div><!-- end card header -->

                <div class="card-body">

                    {{ include('president/_form.html.twig') }}
                </div>
            </div>
        </div>
    </div>

{% endblock %}
{% block javascripts %}
{#    <script>#}
{#        class LinkedSelect {#}

{#            /**#}
{#             * @param {HTMLSelectElement} $select#}
{#             */#}
{#            constructor($select) {#}
{#                this.$select = $select#}
{#                this.$target = document.querySelector(this.$select.dataset.target)#}
{#                this.$placeholder = this.$target.firstElementChild#}
{#                //  this.onChange = debounce(this.onChange.bind(this), 500)#}
{#                this.onChange = this.onChange.bind(this)#}
{#                this.$loader = null#}
{#                this.cache = {}#}
{#                this.$select.addEventListener('change', this.onChange)#}
{#            }#}

{#            /**#}
{#             * Se déclenche au changement de valeur d'un select#}
{#             * @param {Event} e#}
{#             */#}
{#            onChange(e) {#}
{#                if (e.target.value === '0') {#}

{#                    return#}
{#                }#}

{#                this.loadOptions(e.target.value, (options) => {#}
{#                    this.$target.innerHTML = options#}
{#                    this.$target.insertBefore(this.$placeholder, this.$target.firstChild)#}
{#                    this.$target.selectedIndex = 0#}
{#                    this.$target.style.display = null#}

{#                })#}
{#            }#}

{#            /**#}
{#             * Charge les options à partir du serveur (ou du cache)#}
{#             * @param {string} id#}
{#             * @param callback#}
{#             */#}
{#            loadOptions(id, callback) {#}
{#                if (this.cache[id]) {#}
{#                    callback(this.cache[id])#}
{#                    return#}
{#                }#}
{#                this.showLoader()#}
{#                let request = new XMLHttpRequest()#}
{#                request.open('GET', this.$select.dataset.source.replace('id', id), true)#}
{#                request.onload = () => {#}
{#                    if (request.status >= 200 && request.status < 400) {#}
{#                        let data = JSON.parse(request.responseText)#}
{#                        let options = data.reduce(function (acc, option) {#}
{#                            return acc + '<option value="' + option.value + '">' + option.label + '</option>'#}
{#                        }, '')#}
{#                        this.cache[id] = options#}
{#                        this.hideLoader()#}
{#                        callback(options)#}
{#                    } else {#}
{#                        alert('Impossible de charger la liste')#}
{#                    }#}
{#                }#}
{#                request.onerror = function () {#}
{#                    alert('Impossible de charger la liste')#}
{#                }#}
{#                request.send()#}
{#            }#}

{#            showLoader() {#}
{#                this.$loader = document.createTextNode('Chargement...')#}
{#                this.$target.parentNode.appendChild(this.$loader)#}
{#            }#}

{#            hideLoader() {#}
{#                if (this.$loader !== null) {#}
{#                    this.$loader.parentNode.removeChild(this.$loader)#}
{#                    this.$loader = null#}
{#                }#}
{#            }#}

{#        }#}

{#        let $selects = document.querySelectorAll('.linked-select')#}
{#        $selects.forEach(function ($select) {#}
{#            new LinkedSelect($select)#}

{#        })#}

{#    </script>#}

{#    <script>#}
{#        document.querySelector('#ouverture_affecter_section_section').addEventListener('change', function() {#}
{#            let sectionId = this.value;#}

{#            fetch('/ajax/path-to-fetch-conseillers-and-greffiers/' + sectionId)#}
{#                .then(response => response.json())#}
{#                .then(data => {#}
{#                    // let conseillerSelect = document.querySelector('#form_conseillerRapporteur');#}
{#                    // conseillerSelect.innerHTML = ''; // Clear previous options#}
{#                    //#}
{#                    // data.conseillers.forEach(function(conseiller) {#}
{#                    //     let option = new Option(conseiller.name, conseiller.id);#}
{#                    //     conseillerSelect.add(option);#}
{#                    // });#}

{#                    let greffierSelect = document.querySelector('#ouverture_affecter_section_greffier');#}
{#                    greffierSelect.innerHTML = ''; // Clear previous options#}

{#                    data.greffiers.forEach(function(greffier) {#}
{#                        let option = new Option(greffier.name, greffier.id);#}
{#                        greffierSelect.add(option);#}
{#                    });#}
{#                });#}
{#        });#}
{#    </script>#}
{% endblock %}
