{% extends 'base.html.twig' %}
{# {% block stylesheets %} #}


{#     <link rel="stylesheet" href="{{ asset('assets/css/datatables.min.css') }}"> #}


{# {% endblock %} #}

   {% block body %}

       <div class="row">
           <div class="col-lg-12">
               <div class="card">
                   <div class="card-header">
                       <h4 class="card-title mb-0">Creation d'un utilisateur</h4>
                   </div><!-- end card header -->

                   <div class="card-body">

                       {{ form_start(registrationForm) }}
                       <div class="row">

                           <div class="col-md-6">{{ form_row(registrationForm.nom) }}</div>
                           <div class="col-md-6">  {{ form_row(registrationForm.prenoms) }}</div>
                           <div class="col-md-6"> {{ form_row(registrationForm.telephone) }}</div>
                           <div class="col-md-6"> {{ form_row(registrationForm.email) }}</div>
                           <div class="col-md-6"> {{ form_row(registrationForm.titre) }}</div>
                           <div class="col-md-6">
                               {{ form_row(registrationForm.structure) }}
                           </div>
                           <div class="col-md-6">
                               {{ form_row(registrationForm.sections) }}
                           </div>
                           <div class="col-md-6">   {{ form_row(registrationForm.password, {
                                   label: 'Mot de passe'
                               }) }}</div>
                           <div class="col-md-6">    {{ form_row(registrationForm.passwordConfirm) }}

                           </div>

                           <div class="col-md-6"> {{ form_row(registrationForm.roles,{'attr': {'class':  ' data-choices data-choices-removeItem multiple'}}) }}</div>

                           <div class="hstack gap-2 justify-content-center">
                               <input type="reset" value="Annuler" class="btn btn-light"/>
                               {#                               <button type="reset" class="btn btn-light" data-bs-dismiss="modal">Fermer</button> #}
                               <button type="submit" class="btn btn-success" id="add-btn">Ajouter</button>
                               {#                                   <button type="button" class="btn btn-success" id="edit-btn">Update</button> #}
                           </div>
                       </div>
                       {{ form_end(registrationForm) }}

                   </div>

               </div>
           </div>
       </div>
   {% endblock %}

{% block javascripts %}
    <script>
        class LinkedSelect {

            /**
             * @param {HTMLSelectElement} $select
             */
            constructor($select) {
                this.$select = $select
                this.$target = document.querySelector(this.$select.dataset.target)
                this.$placeholder = this.$target.firstElementChild
                //  this.onChange = debounce(this.onChange.bind(this), 500)
                this.onChange = this.onChange.bind(this)
                this.$loader = null
                this.cache = {}
                this.$select.addEventListener('change', this.onChange)
            }

            /**
             * Se déclenche au changement de valeur d'un select
             * @param {Event} e
             */
            onChange(e) {
                if (e.target.value === '0') {

                    return
                }

                this.loadOptions(e.target.value, (options) => {
                    this.$target.innerHTML = options
                    this.$target.insertBefore(this.$placeholder, this.$target.firstChild)
                    this.$target.selectedIndex = 0
                    this.$target.style.display = null

                })
            }

            /**
             * Charge les options à partir du serveur (ou du cache)
             * @param {string} id
             * @param callback
             */
            loadOptions(id, callback) {
                if (this.cache[id]) {
                    callback(this.cache[id])
                    return
                }
                this.showLoader()
                let request = new XMLHttpRequest()
                request.open('GET', this.$select.dataset.source.replace('id', id), true)
                request.onload = () => {
                    if (request.status >= 200 && request.status < 400) {
                        let data = JSON.parse(request.responseText)
                        let options = data.reduce(function (acc, option) {
                            return acc + '<option value="' + option.value + '">' + option.label + '</option>'
                        }, '')
                        this.cache[id] = options
                        this.hideLoader()
                        callback(options)
                    } else {
                        alert('Impossible de charger la liste')
                    }
                }
                request.onerror = function () {
                    alert('Impossible de charger la liste')
                }
                request.send()
            }

            showLoader() {
                this.$loader = document.createTextNode('Chargement...')
                this.$target.parentNode.appendChild(this.$loader)
            }

            hideLoader() {
                if (this.$loader !== null) {
                    this.$loader.parentNode.removeChild(this.$loader)
                    this.$loader = null
                }
            }

        }

        let $selects = document.querySelectorAll('.linked-select')
        $selects.forEach(function ($select) {
            new LinkedSelect($select)

        })
    </script>
{% endblock %}





